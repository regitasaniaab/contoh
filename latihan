{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "A = 2\n",
        "B = 3\n",
        "C = 1\n",
        "if A > C:\n",
        "  print(A)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lP95U8JpuIJ8",
        "outputId": "15808029-9c4e-4056-d914-c7f3bc2cf6f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if A < B:\n",
        "  print(\"Betul\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RdCZ-ZMIUV6B",
        "outputId": "777d9921-2140-439b-87c8-62b6596b6723"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Betul\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if A > B and A > C:\n",
        "  print(\"Tampil\")\n",
        "else:\n",
        "  print(\"enggak\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rosd-D26Ut-Y",
        "outputId": "0de808f8-af16-4903-bb1a-71f0446a4f50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enggak\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sistem = [\"saya\", \"pergi\", \"ke\", \"LPPI\", \"kemang\"]\n",
        "engineer = [\"tidak\", \"jalan\", \"karena\", \"banjir\"]\n",
        "\n",
        "engineer[0] = \"tetap\"\n",
        "\n",
        "print(sistem[0], engineer[0], sistem[1], engineer[-2], engineer[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J5Ucy3nIWUk7",
        "outputId": "16d3248f-e200-4ffb-ad42-c7d82d93db44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "saya tetap pergi karena banjir\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A = 6\n",
        "B = 7\n",
        "C = 8\n",
        "\n",
        "if C > A:\n",
        "  if B > C: print(\"true\")\n",
        "  else: print(\"false\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IYq5bj6-ZDBh",
        "outputId": "6ba64d88-3a6e-48c8-ff4f-d389af04b181"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "false\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nilai_siswa = {\n",
        "    'nama' : ['Nama 1', 'Nama 2', 'Nama 3', 'Nama 4', 'Nama 5'],\n",
        "    'nilai A' : [80, 55, 80, 75, 90],\n",
        "    'nilai B' : [70, 70, 90, 60, 70]\n",
        "}\n",
        "\n",
        "print(nilai_siswa)\n",
        "\n",
        "for i in range(len(nilai_siswa)):\n",
        "  for key in nilai_siswa[1][i]:\n",
        "    if nilai_siswa[1][i] or nilai_siswa[2][i] > 60:\n",
        "      print(nilai_siswa[0], \"pass\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "uG8Kx0DUZ_Jv",
        "outputId": "6777f2e9-2d8a-43ee-82b9-0e189013fe2e"
      },
      "execution_count": 84,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'nama': ['Nama 1', 'Nama 2', 'Nama 3', 'Nama 4', 'Nama 5'], 'nilai A': [80, 55, 80, 75, 90], 'nilai B': [70, 70, 90, 60, 70]}\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "1",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-84-0c4e6e5887e0>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnilai_siswa\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 10\u001b[0;31m   \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     11\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m60\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"pass\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 1"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# nama = input(\"nama : \")\n",
        "# hobi = input(\"hobi : \")\n",
        "# email = input(\"email : \")\n",
        "# tlp = input(\"tlp : \")\n",
        "uts = int(input(\"uts : \"))\n",
        "uas = int(input(\"uas : \"))\n",
        "\n",
        "if uts <= 60 or uas <= 60:\n",
        "  total = uts+uas\n",
        "  if total <= 125:\n",
        "    print(\"status : gagal\\nkarena salah satu nilai <= 60\")\n",
        "  else: print(\"status : lulus\")\n",
        "else: print(\"status : gagal\\nkarena total nilai <= 125\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4nlWb3qihzxE",
        "outputId": "42567d7a-7479-4716-ee0d-06be67373c6a"
      },
      "execution_count": 83,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "uts : 62\n",
            "uas : 63\n",
            "status : gagal\n",
            " karena total nilai <= 125\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        " 1  1  1  1  1 1 1 1\n",
        "128 64 32 16 8 4 2 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "MeVFUrcvwF_J",
        "outputId": "17620f0b-8a33-4de7-feb1-5164f50983ad"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-85-9a50f29f8533>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-85-9a50f29f8533>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    128 64 32 16 8 4 2 1\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# huruf = str(input(\"input huruf :\"))\n",
        "huruf = 'B'\n",
        "print(\"huruf       : \", huruf)\n",
        "ascii = ord(huruf)\n",
        "print(\"ascii       : \", ascii)\n",
        "print(\"binary      : \", bin(ascii))\n",
        "print(\"octal       : \", oct(ascii))\n",
        "print(\"hexadecimal : \", hex(ascii))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hRrNrn5L6SFt",
        "outputId": "1277f4b2-1ee2-4d1f-e03e-a937ec5ccab0"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "huruf       :  B\n",
            "ascii       :  66\n",
            "binary      :  0b1000010\n",
            "octal       :  0o102\n",
            "hexadecimal :  0x42\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def convert(kata):\n",
        "  binary_list = []\n",
        "  for char in range(7, -1, -1):\n",
        "      bit = (ord(kata) >> char) & 1\n",
        "      binary_list += str(bit)\n",
        "  return binary_list\n",
        "\n",
        "kata = 'B'\n",
        "binary_list = convert(kata)\n",
        "print(f\"The binary representation of '{kata}' is: {binary_list}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XDkCwTxM8Bfv",
        "outputId": "cf08b7ad-a072-4da3-e0bd-780825d2d4c2"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The binary representation of 'B' is: ['0', '1', '0', '0', '0', '0', '1', '0']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = 19\n",
        "\n",
        "while s < 16:\n",
        "  print(s)\n",
        "  s+=1\n",
        "  while s > 18:\n",
        "    s-=1\n",
        "    if s==16: break\n",
        "print(\"selesai\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pPewN8-GUw0o",
        "outputId": "ee1ffc82-17d9-4cd0-e716-f7d377697cbc"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "selesai\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# s = 12\n",
        "\n",
        "# while s < 18:\n",
        "#   print(s)\n",
        "#   s += 1\n",
        "#   if s == 16:\n",
        "#     break\n",
        "# print(\"selesai\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M8rnjnCAuiGG",
        "outputId": "31f3dda7-171e-4f26-adfd-9710e053ce7f"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "selesai\n"
          ]
        }
      ]
    }
  ]
}