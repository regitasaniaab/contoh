{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "A = 2\n",
        "B = 3\n",
        "C = 1\n",
        "if A > C:\n",
        "  print(A)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lP95U8JpuIJ8",
        "outputId": "15808029-9c4e-4056-d914-c7f3bc2cf6f6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if A < B:\n",
        "  print(\"Betul\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RdCZ-ZMIUV6B",
        "outputId": "777d9921-2140-439b-87c8-62b6596b6723"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Betul\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if A > B and A > C:\n",
        "  print(\"Tampil\")\n",
        "else:\n",
        "  print(\"enggak\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rosd-D26Ut-Y",
        "outputId": "0de808f8-af16-4903-bb1a-71f0446a4f50"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "enggak\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sistem = [\"saya\", \"pergi\", \"ke\", \"LPPI\", \"kemang\"]\n",
        "engineer = [\"tidak\", \"jalan\", \"karena\", \"banjir\"]\n",
        "\n",
        "engineer[0] = \"tetap\"\n",
        "\n",
        "print(sistem[0], engineer[0], sistem[1], engineer[-2], engineer[-1])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J5Ucy3nIWUk7",
        "outputId": "16d3248f-e200-4ffb-ad42-c7d82d93db44"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "saya tetap pergi karena banjir\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "A = 6\n",
        "B = 7\n",
        "C = 8\n",
        "\n",
        "if C > A:\n",
        "  if B > C: print(\"true\")\n",
        "  else: print(\"false\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IYq5bj6-ZDBh",
        "outputId": "6ba64d88-3a6e-48c8-ff4f-d389af04b181"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "false\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        ">>> numbers = {\"one\": 1, \"two\": 2, \"three\": 3, \"four\": 4}\n",
        "\n",
        ">>> small_numbers = {}\n",
        "\n",
        ">>> for key, value in numbers.items():\n",
        "...     if value <= 2:\n",
        "...         small_numbers[key] = value\n",
        "...\n",
        "\n",
        ">>> small_numbers\n",
        "{'one': 1, 'two': 2}"
      ],
      "metadata": {
        "id": "nldzYBWXw_Ex"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nilai_siswa = {\n",
        "    'nama' : ['Nama 1', 'Nama 2', 'Nama 3', 'Nama 4', 'Nama 5'],\n",
        "    'nilai A' : [80, 55, 80, 75, 90],\n",
        "    'nilai B' : [70, 70, 90, 60, 70]\n",
        "}\n",
        "print(nilai_siswa)\n",
        "\n",
        "status = {}\n",
        "\n",
        "# for i in list(nilai_siswa.items())[-2:-1]:\n",
        "#   for item in nilai_siswa[i][item]:\n",
        "#     if nilai_siswa['Nilai A'][item] > 60 or nilai_siswa['Nilai B'][item]:\n",
        "#       print(nilai_siswa[0], \"pass\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        },
        "id": "uG8Kx0DUZ_Jv",
        "outputId": "e124104f-950e-440b-e715-228152de3a6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'nama': ['Nama 1', 'Nama 2', 'Nama 3', 'Nama 4', 'Nama 5'], 'nilai A': [80, 55, 80, 75, 90], 'nilai B': [70, 70, 90, 60, 70]}\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "list indices must be integers or slices, not tuple",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-31-4f100cab66fe>\u001b[0m in \u001b[0;36m<cell line: 9>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnilai_siswa\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m   \u001b[0;31m# for item in nilai_siswa[i][item]:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'nilai A'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m60\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'nilai B'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m       \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnilai_siswa\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"pass\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: list indices must be integers or slices, not tuple"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nama = ['Nama 1', 'Nama 2', 'Nama 3', 'Nama 4', 'Nama 5']\n",
        "nilaiA = [80, 55, 80, 75, 90]\n",
        "nilaiB = [70, 70, 90, 60, 70]\n",
        "\n",
        "for i in range(len(nama)):\n",
        "    if (nilaiA[i] <= 60) or nilaiB[i] <= 60:\n",
        "        print(f\"{nama[i]}, Nilai A = {nilaiA[i]}, Nilai A = {nilaiB[i]}, Total = {nilaiA[i]+nilaiB[i]}, Status : tidak lulus\")\n",
        "    else:\n",
        "        print(f\"{nama[i]}, Nilai A = {nilaiA[i]}, Nilai A = {nilaiB[i]}, Total = {nilaiA[i]+nilaiB[i]}, Status : lulus\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fd1JsOO3_f_p",
        "outputId": "9a1d4ac5-e531-4ffc-ce2a-74735a9de5df"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Nama 1, Nilai A = 80, Nilai A = 70, Total = 150, Status : lulus\n",
            "Nama 2, Nilai A = 55, Nilai A = 70, Total = 125, Status : tidak lulus\n",
            "Nama 3, Nilai A = 80, Nilai A = 90, Total = 170, Status : lulus\n",
            "Nama 4, Nilai A = 75, Nilai A = 60, Total = 135, Status : tidak lulus\n",
            "Nama 5, Nilai A = 90, Nilai A = 70, Total = 160, Status : lulus\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "nama = input(\"nama : \")\n",
        "hobi = input(\"hobi : \")\n",
        "email = input(\"email : \")\n",
        "tlp = input(\"tlp : \")\n",
        "uts = int(input(\"uts : \"))\n",
        "uas = int(input(\"uas : \"))\n",
        "\n",
        "if uts <= 60 or uas <= 60:\n",
        "  total = uts+uas\n",
        "  if total <= 125:\n",
        "    print(\"status : gagal\\nkarena salah satu nilai <= 60\")\n",
        "  else: print(\"status : lulus\")\n",
        "else: print(\"status : gagal\\nkarena total nilai <= 125\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4nlWb3qihzxE",
        "outputId": "42567d7a-7479-4716-ee0d-06be67373c6a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "uts : 62\n",
            "uas : 63\n",
            "status : gagal\n",
            " karena total nilai <= 125\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# # huruf = str(input(\"input huruf :\"))\n",
        "# huruf = 'B'\n",
        "# print(\"huruf       : \", huruf)\n",
        "# ascii = ord(huruf)\n",
        "# print(\"ascii       : \", ascii)\n",
        "# print(\"binary      : \", bin(ascii))\n",
        "# print(\"octal       : \", oct(ascii))\n",
        "# print(\"hexadecimal : \", hex(ascii))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hRrNrn5L6SFt",
        "outputId": "1277f4b2-1ee2-4d1f-e03e-a937ec5ccab0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "huruf       :  B\n",
            "ascii       :  66\n",
            "binary      :  0b1000010\n",
            "octal       :  0o102\n",
            "hexadecimal :  0x42\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "huruf = input(\"input huruf : \")\n",
        "bin = ''.join(format(i, '08b') for i in bytearray(huruf, encoding ='utf-8'))\n",
        "print(\"The string after binary conversion : \" + str(bin))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XDkCwTxM8Bfv",
        "outputId": "91513ee2-c11b-47bb-861e-a57edc87b897"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "input huruf : B\n",
            "The string after binary conversion : 01000010\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "kata = input('masukkan kata : ')\n",
        "\n",
        "for i in range(len(kata)):\n",
        "    print('\\nhuruf\\t= ', kata[i])\n",
        "    desimal1 = ord(kata[i])\n",
        "    print('desimal\\t= ', desimal1)\n",
        "\n",
        "    biner = ''\n",
        "    oktal = ''\n",
        "    hexa = ''\n",
        "\n",
        "    #biner\n",
        "    desimal=desimal1\n",
        "    while desimal > 0:\n",
        "        sisa = desimal % 2\n",
        "        biner = str(sisa) + biner\n",
        "        desimal //= 2\n",
        "    print('biner\\t= ', biner)\n",
        "\n",
        "    #oktal\n",
        "    desimal=desimal1\n",
        "    while desimal > 0:\n",
        "        sisa = desimal % 8\n",
        "        oktal = str(sisa) + oktal\n",
        "        desimal //= 8\n",
        "    print('oktal\\t= ', oktal)\n",
        "\n",
        "    #hexa\n",
        "    desimal=desimal1\n",
        "    hex_chars = \"0123456789ABCDEF\"\n",
        "    while desimal > 0:\n",
        "         sisa = desimal % 16\n",
        "         hexa = hex_chars[sisa] + hexa\n",
        "         desimal //= 16\n",
        "    print('hexa\\t= ', hexa)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cdy4uloqAD-a",
        "outputId": "97e5c899-c3c7-46cd-ddef-dbcaf9e3035e"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "masukkan kata : BaT\n",
            "\n",
            "huruf\t=  B\n",
            "desimal\t=  66\n",
            "biner\t=  1000010\n",
            "oktal\t=  102\n",
            "hexa\t=  42\n",
            "\n",
            "huruf\t=  a\n",
            "desimal\t=  97\n",
            "biner\t=  1100001\n",
            "oktal\t=  141\n",
            "hexa\t=  61\n",
            "\n",
            "huruf\t=  T\n",
            "desimal\t=  84\n",
            "biner\t=  1010100\n",
            "oktal\t=  124\n",
            "hexa\t=  54\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = 12\n",
        "\n",
        "while s < 16:\n",
        "  print(s)\n",
        "  s += 1\n",
        "  while s > 18:\n",
        "    s -= 1\n",
        "    if s == 16: continue\n",
        "print(\"selesai\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pPewN8-GUw0o",
        "outputId": "a29352cc-5501-4363-fa8c-50b2c07b7829"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "selesai\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "s = 12\n",
        "\n",
        "while s <= 19:\n",
        "    if s <= 15:\n",
        "        print(s)\n",
        "    elif s > 18:\n",
        "        print('selesai')\n",
        "    s = s + 1"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mvjCm8EG-_Za",
        "outputId": "df6762e6-50c6-43a1-b67a-85508c45c229"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "12\n",
            "13\n",
            "14\n",
            "15\n",
            "selesai\n"
          ]
        }
      ]
    }
  ]
}